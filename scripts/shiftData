#!/bin/env perl

use warnings;
use strict;

my $line;
my @values;
my $i;
my @lo;
my @hi;
my $minPos;
my $maxPos;
my $numAtoms;
my $atom;

open (INFILE,"<$ARGV[0]") || die "Cannot open $ARGV[0] for reading.\n";
open (OUTFILE,">$ARGV[1]") || die "Cannot open $ARGV[1] for writing.\n";

# Read and print title line and blank line.
$line = <INFILE>;
print OUTFILE "$line";
$line = <INFILE>;
print OUTFILE "$line";

# Get the number of atoms and print the line.
@values = &prepLine(\*INFILE,"",'\s+');
$numAtoms = $values[0];
print OUTFILE "$numAtoms atoms\n";

# Read past the rest of the header data positioning the read cursor just
#   before the box parameters..
foreach $line (1..9)
{
   $line = <INFILE>;
   print OUTFILE "$line";
}

# Print a line allowing for 1 extra bond per atom.
print OUTFILE "1 extra bond per atom\n\n";

# Establish initial values for determination of the limits of the box size.
$minPos = 0.0;
$maxPos = 0.0;

# Check each dimension (x,y,z) and determine the limits.
foreach $i (1..3)
{
   @values = &prepLine(\*INFILE,"",'\s+');
   $lo[$i] = $values[0];
   $hi[$i] = $values[1];

   if ($lo[$i] < $minPos)
      {$minPos = $lo[$i];}

   if ($hi[$i] > $maxPos)
      {$maxPos = $hi[$i];}
}

#Print the found limits.
print STDOUT "maxPos=$maxPos\n";
print STDOUT "minPos=$minPos\n";

$maxPos = int($maxPos) -$minPos + 10.0;

print OUTFILE "0.000 $maxPos xlo xhi\n";
print OUTFILE "0.000 $maxPos ylo yhi\n";
print OUTFILE "0.000 $maxPos zlo zhi\n";

# Go to the place where the atom coordinates are recorded regurgitating along
#   the way.
while (1)
{
   @values = &prepLine(\*INFILE,"",'\s+');
   print OUTFILE "@values\n";

   if ($values[0] eq "Atoms")
      {last;}
}

# Get into the final position.
$line = <INFILE>;
print OUTFILE "\n";

# Read each atom
foreach $atom (1..$numAtoms)
{
   @values = &prepLine(\*INFILE,"",'\s+');
   $values[4] = $values[4] - $minPos + 5.0;
   $values[5] = $values[5] - $minPos + 5.0;
   $values[6] = $values[6] - $minPos + 5.0;
   print OUTFILE "@values\n";
}

while ($line = <INFILE>)
   {print OUTFILE $line;}

close (INFILE);
close (OUTFILE);

sub prepLine
{
   # Define passed parameters.
   my $fileHandle = $_[0];
   my $line = $_[1];
   my $splitter = $_[2];

   # Declare local variables.
   my @values;

   # Read the line if necessary.
   if ("$fileHandle" ne "")
      {$line = <$fileHandle>;}

   # Chomp, split, and shift it.
   chomp $line;
   @values = split(/$splitter/,$line);
   if ($#values == -1)
      {$values[0] = "";}
   if (($values[0] eq "") && ($#values != 0))
      {shift @values;}

   return @values;
}
